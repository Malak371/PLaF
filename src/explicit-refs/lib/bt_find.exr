
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; length <= 3} 
in letrec find_helper(nd) = proc (value) {
            if number?(nd)
            then zero?(1)
            else if nd.data = value
                 then 1=1
                 else if value << nd.data
                      then ((find_helper nd.left) value)
                      else ((find_helper nd.right) value)
}
in let find_bt = proc (t) { (find_helper t.root) }
in ((find_bt t1) 12)
